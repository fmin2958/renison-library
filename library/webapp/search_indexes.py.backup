from haystack import indexes
from webapp import models


class TitleIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    rowkey = indexes.IntegerField(model_attr='rowkey')
    title = indexes.CharField(model_attr='title')
    alt_title = indexes.CharField(model_attr='alt_title')
    subtitle = indexes.CharField(model_attr='subtitle')
    author = indexes.IntegerField(model_attr='author')
    author2 = indexes.IntegerField(model_attr='author2')
    author3 = indexes.IntegerField(model_attr='author3')
    author4 = indexes.IntegerField(model_attr='author4')
    author5 = indexes.IntegerField(model_attr='author5')
    author6 = indexes.IntegerField(model_attr='author6')
    illustrator = indexes.IntegerField(model_attr='illustrator')
    translator = indexes.IntegerField(model_attr='translator')
    editor = indexes.IntegerField(model_attr='editor')
    publisher = indexes.IntegerField(model_attr='publisher')
    pub_place = indexes.IntegerField(model_attr='pub_place')
    release_date = indexes.DateField(model_attr='release_date')
    pages = indexes.IntegerField(model_attr='pages')
    edition = indexes.IntegerField(model_attr='edition')
    content_language = indexes.IntegerField(model_attr='content_language')
    signed = indexes.IntegerField(model_attr='signed')
    dimensions = indexes.CharField(model_attr='dimensions')
    reading_level = indexes.IntegerField(model_attr='reading_level')
    copies = indexes.IntegerField(model_attr='copies')
    barcode = indexes.CharField(model_attr='barcode')
    isbn = indexes.CharField(model_attr='isbn')
    dewey = indexes.CharField(model_attr='dewey')
    type = indexes.IntegerField(model_attr='type')
    format = indexes.IntegerField(model_attr='format')
    series = indexes.IntegerField(model_attr='series')
    series_number = indexes.IntegerField(model_attr='series_number')
    my_rating = indexes.IntegerField(model_attr='my_rating')
    item_condition = indexes.IntegerField(model_attr='item_condition')
    cover_condition = indexes.IntegerField(model_attr='cover_condition')
    category1 = indexes.IntegerField(model_attr='category1')
    category2 = indexes.IntegerField(model_attr='category2')
    category3 = indexes.IntegerField(model_attr='category3')
    location = indexes.IntegerField(model_attr='location')
    keywords = indexes.CharField(model_attr='keywords')
    read_count = indexes.IntegerField(model_attr='read_count')
    date_last_read = indexes.DateField(model_attr='date_last_read')
    my_comments = indexes.CharField(model_attr='my_comments')
    date_entered = indexes.DateField(model_attr='date_entered')
    date_last_updated = indexes.DateField(model_attr='date_last_updated')
    favorite = indexes.IntegerField(model_attr='date_last_updated')
    out_of_print = indexes.IntegerField(model_attr='out_of_print')
    status = indexes.IntegerField(model_attr='status')

    def get_model(self):
        return models.Readerware

    def index_queryset(self, using=None):
        return self.get_model().objects.all()
